<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-22T13:52:24.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>kaziii</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用redux thunk 回顾</title>
    <link href="http://yoursite.com/2017/03/22/%E4%BD%BF%E7%94%A8redux%20thunk%20%E5%9B%9E%E9%A1%BE/"/>
    <id>http://yoursite.com/2017/03/22/使用redux thunk 回顾/</id>
    <published>2017-03-22T11:49:40.000Z</published>
    <updated>2017-03-22T13:52:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为在使用react 构建一个webChatApp 使用了redux ,其中异步请求与websocket请求我都是使用redux-thunk这个facebook官方推荐的中间件来处理大部分的业务。<a href="https://github.com/kaziii/chatForWilddog" target="_blank" rel="external">项目源码再此</a></p>
<h1 id="redux-action"><a href="#redux-action" class="headerlink" title="redux action"></a>redux action</h1><p>通常在react 中发起一个同步请求不使用redux-thunk的时候，action的返回值应该为一个对象，如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//action.js</span></div><div class="line"><span class="keyword">const</span> PULL_SOME_REQ = <span class="string">'PULL_SOME_REQ'</span>;</div><div class="line"></div><div class="line">exports pullSomeRequest = <span class="function">(<span class="params">query</span>)=&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'PULL_SOME_REQ'</span>,</div><div class="line">        <span class="attr">payload</span>: query</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="what’s-a-thunk"><a href="#what’s-a-thunk" class="headerlink" title="what’s a thunk?"></a>what’s a thunk?</h1><blockquote>
<p>A thunk is a function that wraps an expression to delay its evaluation.<br><small>thunk是一个包装表达式以延迟其计算的函数。</small></p>
</blockquote>
<p>那么如何使用呢…</p>
<p>如果需要使用redux-thunk的话，那么必须要通过redux的中间件机制<a href="http://redux.js.org/docs/api/applyMiddleware.html" target="_blank" rel="external">applyMiddleware</a>在redux 创建store的时候注入其中:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./src/store/reducer'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">    reudcer,</div><div class="line">    applyMiddleware(thunk)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>注入store之后自然可以在action中使用thunk func:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//action.js</span></div><div class="line"><span class="keyword">import</span> Wilddog <span class="keyword">from</span> <span class="string">'wilddog'</span>;</div><div class="line">...</div><div class="line">let ref = wilddog.ref();</div><div class="line"></div><div class="line"><span class="keyword">export</span> PUlL_SOME_REQ = <span class="string">'PULL_SOME_REQ'</span>;</div><div class="line"><span class="keyword">export</span> PULL_SOME_ERR = <span class="string">"PULL_SOME_ERR"</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> pullSomeRequest = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch,getState</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 如果希望在调用的时候使用promise 请在此处返回一个promise</span></div><div class="line">        <span class="keyword">return</span> ref.once(<span class="string">'value'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">            dispatch(&#123;</div><div class="line"></div><div class="line">                <span class="attr">type</span>: <span class="string">'PULL_SOME_REQ'</span>,</div><div class="line">                <span class="attr">payload</span>: response    </div><div class="line">            &#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span> &#123;</div><div class="line"></div><div class="line">                dispatch(&#123;</div><div class="line">                    <span class="attr">type</span>: <span class="string">'PULL_SOME_ERR'</span>,</div><div class="line">                    <span class="attr">payload</span>: err    </div><div class="line">                &#125;)</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> pushSomeResponse = <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch,getState</span>) =&gt;</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ref.child(messages).push(msg).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            dispatch(pullSomeRequest());</div><div class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">            dispatch(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">'PUSH_SOME_ERR'</span>,</div><div class="line">                <span class="attr">payload</span>: err        </div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// component/connect.js</span></div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> &#123; pushSomeResponse &#125; <span class="keyword">from</span> <span class="string">'../action'</span></div><div class="line"></div><div class="line">@connect(</div><div class="line">    <span class="function"><span class="params">state</span> =&gt;</span> state.payload,</div><div class="line">    dispatch =&gt; bindActionCreators(pushSomeResponse, dispatch)</div><div class="line">)</div><div class="line"><span class="keyword">export</span> Class MessagesList extends React.Component &#123;</div><div class="line">    componentDidMount()&#123;</div><div class="line">        <span class="keyword">this</span>.props.dispatch(pushSomeResponse(<span class="string">'msg'</span>)).then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.props)    </div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此 我理解redux 就如一个server的快照一样一个type 代表一个state 切片式的数据管理方式跟自己之前接触的ember data还是有一定区别，个人学习后有其他感悟再另行补充。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因为在使用react 构建一个webChatApp 使用了redux ,其中异步请求与websocket请求我都是使用redux-thunk这个facebook官方推荐的中间件来处理大部分的业务。&lt;a href=&quot;https://github.com/kaziii/ch
    
    </summary>
    
    
  </entry>
  
</feed>
